# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iYFwpyG9p53y2DLO0hYaJnR82D1ePCNX
"""

import pandas as pd

'''
Data Collection
'''
data=pd.read_csv('USA_Housing.csv')

'''
Basic analysis of dataset
using functions like:
head()
describe()
info()
tail()

'''
data.head()

data.describe()

'''Data analysis(EDA) Visualization
1)check the no. of values in target
--Use COUNTPLOT
library:seaborn
plot:countplot()
'''
import seaborn as sb
sb.countplot(data=data)

'''
2.BOX AND WHISKER PLOT
plots on the dataframe
'''
data.plot(kind='box',figsize=(15,15))

'''
3.Scatter plot 
matplotlib --> pyplot --> .scatter()

'''
from matplotlib import pyplot
#Area Population (x-axis) vs Price(y-axis)
pyplot.scatter(data['Area Population'],data['Price'])

'''
Data Cleaning
Remove address because it has no significance
'''
data.drop('Address',axis=1,inplace=True)

data.head()

'''
Data Splitting

-to split the universal dataset
Library: sklearn
module: model_selection
class:train_test_split

'''

from sklearn.model_selection import train_test_split as tts
x=data.iloc[:,:-1]
y=data.iloc[:,-1]
x_train,x_test,y_train,y_test=tts(x,y,test_size=0.2,random_state=43)

'''
Selection of algorithm:
ML- SL -Classification
Regression target values
Price value is continuous
i] LinearRegression
    library: sklearn
    module : linear_model
    class :LinearRegression
'''
from sklearn.linear_model import LinearRegression
linreg=LinearRegression()

'''
Training(learning part)
Fit the training data to the algorithm (linreg)
ModelName.fit(Training)

'''
linreg.fit(x_train,y_train)
linreg_pred=linreg.predict(x_test)

'''
Testing (check efficiency of algorithm)
1. Predict the outcomes of new data
ModelName.predict(Features-of-testing-set)

2)Check accuracy of algo (testing set)
ModelName.score(Arrays-of-testing-set)
'''


linreg_accuracy=linreg.score(x_test,y_test)

#accuracy is 92.29%

print(linreg_accuracy)

'''
Saving the model for reusing

-- pickle:
      Save: open file with write binary mode & save it using:
      dump(ModelName,,FileName)
      extensions: pkl ,sav
  Load: readbinary mode 
    load(Filename)
'''
filename='DlitheLinRegModel.pkl'
import pickle
file=open(filename,"wb")
# pickle.dump()
pickle.dump(linreg
            ,file)

